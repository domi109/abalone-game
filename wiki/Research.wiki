#summary Lists all research found by team

= Table of Contents =
<wiki:toc max_depth="3"/>

=Introduction =
This is a quick overview of different approaches to artificial intelligence which could be interesting to implement into the abalone-game.

== Game Complexity ==
Abalone is a two-person [http://en.wikipedia.org/wiki/Zero-sum zero-sum] board game, with [http://en.wikipedia.org/wiki/Perfect_information perfect information].

=== Space-State Complexity ===


=== Game-Tree Complexity ===

=== Complexity of Abalone ===
The average game-length of Abalone, between human players, is around 87 ply. By contrast the average game-length of Abalone, between computer players, is around 130, as computer players play more conservative/defensive. The average branching factor is around 60 - 65.

The space-state complexity of Abalone is similar to Checkers, and since checkers has been solved, it could be solved for Abalone. So space-state complexity for Abalone is low. Having said that, the game-tree complexity of Abalone is complex, due to the high branching factor (As a comparison the branching factor for Chess is around 35, half that of Abalone). Therefore the game-tree complexity of Abalone is high. Overall this leads to a relatively complex game, which is not easy to solve. 

== Game Tree Search Algorithms ==

=== Minimax Algorithm ===
[http://en.wikipedia.org/wiki/Minimax Minimax] is algorithm.

_Advantages_:
 # Easy to implement.
 # Something else
_Disadvantages_:
 # Does not prune branches.
 # Something else.

=== Negamax Algorithm === 
[http://en.wikipedia.org/wiki/Negamax Negamax] is a simplified variant of Minimax 

=== Alpha-Beta Pruning ===
[http://en.wikipedia.org/wiki/Alpha-beta_pruning Alpha-Beta] is

=== Negascout Algorithm ===
[http://en.wikipedia.org/wiki/Negascout Negascout] is

=== SSS Star Algorithm ===
[http://en.wikipedia.org/wiki/SSS* SSS Star] is

=== MTD(f) Algorithm ===
[http://en.wikipedia.org/wiki/MTD(f) MTD(f)] is
=== Iterative Deepening ===
[http://en.wikipedia.org/wiki/Iterative_deepening_depth-first_search Iterative Deepening] is

=== Transposition Table ===
A [http://en.wikipedia.org/wiki/Transposition_table transposition table] is a table which monitors all possible moves analyzed, and makes sure no double moves are analyzed. It is often done through the use of a [http://en.wikipedia.org/wiki/Hash_table hash table].  

== Evaluation Functions ==
A [http://en.wikipedia.org/wiki/Evaluation_function evaluation function] is a function which estimates how good 

=== Basic Evaluation Function ===
eval(_s_) = ^w^1^f^1(_s_) + ^w^2^f^2(_s_)

== Monte Carlo Methods ==
Stuff about Monte Carlo methods will go here.

== Machine Learning ==
Stuff about machine learning will go here.

= References =
[http://dme.uma.pt/people/faculty/pedro.campos/papers/Abalearn.pdf Abalearn: Efficient Self-Play Learning of the game Abalone] by Pedro Campos and Thibault Langlois.

[http://books.google.nl/books?id=L4h2A2vF2pUC&pg=PA35&lpg=PA35&dq=%22machine+learning%22%2Babalone&source=bl&ots=3KOwjAK1zv&sig=kTf2yF8uy4t8g8Jx8r09T9jvd_M&hl=nl&ei=sfqxSvOwN8bi-QaZvsXcCQ&sa=X&oi=book_result&ct=result&resnum=5#v=onepage&q=%22machine%20learning%22%2Babalone&f=false Abalearn: A Risk-Sensitive Approach to Self-play Learning in Abalone] by Pedro Campos and Thibault Langlois.

[http://cse.yeditepe.edu.tr/~eozcan/research/papers/ABLA_id136final.pdf A Simple Intelligent Agent for Playing Abalone Game: ABLA] by Ender Ozcan and Berk Hulagu.

[http://www.cs.unimaas.nl/~uiterwyk/Theses/BSc/Lemmens_BSc-paper.pdf Constructing an Abalone Game-Playing Agent] by N.P.P.M. Lemmens.

[http://www.unimaas.nl/games/files/pcreport.pdf Implementing a Computer Player for Abalone using Alpha-Beta and Monte-Carlo Search] by Pascal Chorus.

[http://sander.landofsand.com/publications/Monte-Carlo_Tree_Search_-_A_New_Framework_for_Game_AI.pdf Monte-Carlo Tree Search: A New Framework for Game AI] by Guillaume Chaslot, Sander Bakkes, Istvan Szita and Pieter Spronck.

[http://www.ru.is/faculty/yngvi/pdf/WinandsBS08.pdf Monte-Carlo Tree Search Solver] by Mark H.M. Winands , Yngvi Bj Ìˆrnsson , and Jahn-Takeshi Saito
 

[http://stackoverflow.com/questions/1291377/how-do-i-create-a-good-evaluation-function-for-a-new-board-game Forum discussion] about evaluation functions.